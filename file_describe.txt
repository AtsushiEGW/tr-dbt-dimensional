===Project Directory Structure===

.
|-- .devcontainer
|   |-- Dockerfile
|   |-- devcontainer.json
|   `-- supervisord.conf
|-- .dockerignore
|-- .env
|-- .env.prod
|-- .sqlfluff
|-- .sqlfluffignore
|-- LICENSE
|-- README.md
|-- create_hello_world.py
|-- docker-compose.dev.yml
|-- docker-compose.yml
|-- file_describe_all_files.txt
|-- ingestion
|   |-- api-request
|   |   |-- api_request.py
|   |   `-- insert_records.py
|   |-- csv_to_db.py
|   |-- output.txt
|   `-- playwright_sample.py
|-- main.py
|-- output.txt
|-- pyproject.toml
|-- requirements.txt
`-- supervisord.log

4 directories, 24 files



=== .devcontainer/devcontainer.json===

{
  "name": "dimensional modeling container",
  "dockerComposeFile": [
    "../docker-compose.yml",
    "../docker-compose.dev.yml"
  ],
  "service": "app",
  "workspaceFolder": "/workspace/project",
  "shutdownAction": "stopCompose",
  "overrideCommand": false,

  "features": {
    "ghcr.io/devcontainers/features/common-utils:2": {
      "installZsh": true,
      "configureZshAsDefaultShell": true,
      "zshTheme": "agnoster",
      "installOhMyZsh": true,
      "installOhMyZshConfig": true,
      "ohMyZshPlugins": "git zsh-autosuggestions zsh-syntax-highlighting",
      "upgradePackages": true
    }
  },

  "mounts": [
    "source=${localEnv:HOME}/.dotfiles,target=/home/dev/.dotfiles,type=bind,consistency=cached,readonly"
  ],
  "postCreateCommand": "bash -lc 'chmod +x /home/dev/.dotfiles/bootstrap.sh || true; DOTFILES=/home/dev/.dotfiles /home/dev/.dotfiles/bootstrap.sh || ture'",

  "forwardPorts": [5432, 3000, 6080],
  "remoteUser": "dev",

  "customizations": {
    "vscode": {
      "extensions": [
        "ms-python.python",
        "ms-python.vscode-pylance",
        "ms-toolsai.jupyter",
        "ms-toolsai.jupyter-keymap",
        "ms-toolsai.jupyter-renderers",
        "ms-toolsai.vscode-jupyter-cell-tags"
      ],
      "settings": {
        "python.defaultInterpreterPath": "/usr/local/bin/python",
        "python.analysis.typeCheckingMode": "basic",
        "python.analysis.autoSearchPaths": true,
        "python.analysis.useLibraryCodeForTypes": true,
        "python.formatting.provider": "black",
        "editor.formatOnSave": true,
        "terminal.integrated.defaultProfile.linux": "zsh"
      }
    }
  }
}


=== .devcontainer/Dockerfile===

FROM python:3.12-slim

# ====== Build-time args ======
ARG USERNAME=dev
ARG USER_UID=1000
ARG USER_GID=1000
ARG ENABLE_GUI=false
ARG NOVNC_PASSWORD=

ENV DEBIAN_FRONTEND=noninteractive

# ====== Base packages (common) ======
RUN apt-get update \
 && apt-get install -y --no-install-recommends \
    build-essential sudo zsh wget curl ca-certificates git \
 && rm -rf /var/lib/apt/lists/*

# ====== GUI / noVNC (dev only when ENABLE_GUI=true) ======
RUN if [ "$ENABLE_GUI" = "true" ]; then \
      set -eux; \
      apt-get update && apt-get install -y --no-install-recommends \
        xvfb x11vnc fluxbox supervisor \
        libnss3 libatk-bridge2.0-0 libgtk-3-0 libgbm1 libasound2 \
        libxshmfence1 libxrandr2 libxdamage1 libxcomposite1 libxext6 libxfixes3 libxrender1 libxtst6 libgl1 \
        fonts-liberation libappindicator3-1 libcups2 lsb-release xdg-utils \
      && rm -rf /var/lib/apt/lists/* \
      && mkdir -p /opt/novnc /opt/websockify \
      && wget -qO- https://github.com/novnc/noVNC/archive/refs/tags/v1.4.0.tar.gz | tar xz -C /opt/novnc --strip-components=1 \
      && wget -qO- https://github.com/novnc/websockify/archive/refs/tags/v0.11.0.tar.gz | tar xz -C /opt/websockify --strip-components=1 ; \
    fi

# ====== Non-root user ======
RUN groupadd --gid ${USER_GID} ${USERNAME} \
 && useradd --create-home --shell /bin/bash --uid ${USER_UID} --gid ${USER_GID} ${USERNAME} \
 && echo "${USERNAME} ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/${USERNAME} \
 && chmod 0440 /etc/sudoers.d/${USERNAME}

WORKDIR /workspace/project
RUN mkdir -p /workspace/project && chown -R ${USER_UID}:${USER_GID} /workspace

# ====== Python deps ======
COPY requirements.txt /tmp/requirements.txt
RUN pip install --no-cache-dir --upgrade pip \
 && pip install --no-cache-dir -r /tmp/requirements.txt

# ====== Bring app code into image (for production) ======
# ※ dev では compose.dev の bind mount が上書きします
COPY . /workspace/project
RUN chown -R ${USER_UID}:${USER_GID} /workspace

# ====== Supervisord config (dev-only runtime will use it) ======
COPY .devcontainer/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# ====== Playwright browsers (optional; requirements.txtに playwright が必要) ======
USER ${USERNAME}
ENV DISPLAY=:99
RUN playwright install --with-deps || true

# ====== Dev-only: prepare x11vnc password file when GUI is enabled ======
# Dev-only: prepare x11vnc password file when GUI is enabled
RUN if [ "$ENABLE_GUI" = "true" ]; then \
      if [ -z "$NOVNC_PASSWORD" ]; then echo "NOVNC_PASSWORD is empty"; exit 1; fi; \
      mkdir -p /home/${USERNAME}/.vnc && \
      x11vnc -storepasswd "${NOVNC_PASSWORD}" /home/${USERNAME}/.vnc/passwd && \
      chown -R ${USER_UID}:${USER_GID} /home/${USERNAME}/.vnc ; \
    fi
USER ${USERNAME}

# ====== Default command (prod) ======
USER ${USERNAME}
CMD ["python", "main.py"]


=== .devcontainer/supervisord.conf===

[supervisord]
nodaemon=true

[program:xvfb]
command=/usr/bin/Xvfb :99 -screen 0 1920x1080x24
autostart=true
autorestart=true
priority=1
environment=DISPLAY=:99

[program:fluxbox]
command=fluxbox
autostart=true
autorestart=true
priority=2
environment=DISPLAY=:99

[program:x11vnc]
; パスワードファイルを使う（Dockerfile で作成）
command=x11vnc -forever -create -display :99 -shared -rfbport 5900 -rfbauth /home/dev/.vnc/passwd
autostart=true
autorestart=true
priority=3
environment=DISPLAY=:99

[program:novnc]
command=/usr/local/bin/websockify --web=/opt/novnc 0.0.0.0:6080 localhost:5900
autostart=true
autorestart=true
priority=4


=== docker-compose.yml===

services:
  app:
    build:
      context: .
      dockerfile: .devcontainer/Dockerfile
      args:
        USER_UID: ${LOCAL_UID:-1000}
        USER_GID: ${LOCAL_GID:-1000}
        ENABLE_GUI: "false"   # 本番はGUIなし
    env_file:
      - ./.env
    working_dir: /workspace/project
    depends_on:
      - db
    networks:
      - metanet1
    # 本番は bind mount なし（イミュータブル）

  db:
    image: postgres:16
    restart: always
    env_file:
      - ./.env
    volumes:
      - pgdata:/var/lib/postgresql/data
    # 本番はFW/リバプロで制御するなら ports を外してもOK
    ports:
      - "5432:5432"
    networks:
      - metanet1
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-postgres} -h 127.0.0.1 -p ${POSTGRES_PORT:-5432}"]
      interval: 5s
      timeout: 3s
      retries: 10


  metabase:
    image: metabase/metabase:latest
    restart: always
    depends_on:
      db:
        condition: service_healthy # db が healthy になるまで待つ
    environment:
      MB_DB_TYPE: postgres
      MB_DB_DBNAME: ${POSTGRES_DB:-metabase_appdb}
      MB_DB_HOST: db
      MB_DB_PORT: ${POSTGRES_PORT:-5432}
      MB_DB_USER: ${POSTGRES_USER:-metabase_user}
      MB_DB_PASS: ${POSTGRES_PASSWORD:-change_me}
    networks:
      - metanet1
    ports:
      - "3000:3000"

networks:
  metanet1:
    driver: bridge

volumes:
  pgdata:


=== docker-compose.dev.yml===

services:
  app:
    build:
      context: .
      dockerfile: .devcontainer/Dockerfile
      args:
        USER_UID: ${LOCAL_UID:-1000}
        USER_GID: ${LOCAL_GID:-1000}
        ENABLE_GUI: "true"
        NOVNC_PASSWORD: ${NOVNC_PASSWORD}   # ← .env から build arg で注入
    env_file:
      - .env
    volumes:
      - ./:/workspace/project:cached
    expose:
      - "6080"   # 外部公開はせず、devcontainer の port forward 経由で利用
    environment:
      - DISPLAY=:99
    command: ["supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]

  db:
    ports:
      - "5432:5432"

  metabase:
    ports:
      - "3000:3000"


=== requirements.txt===

dbt-core
sqlfluff
sqlfluff-templater-dbt
dbt-postgres
python-dotenv
ruff
psycopg2-binary
requests
pandas
playwright
sqlalchemy


=== .dockerignore ===

.git
docker-compose*.yml
pgdata
__pycache__/
*.pyc
.env
.env.*
.output/
dist/
node_modules/


=== .env ===

NOVNC_PASSWORD=sample_password


# postgres
# POSTGRES_HOST=postgres サービス名は db
POSTGRES_PORT=5432
POSTGRES_USER=admin
POSTGRES_PASSWORD=admin12345
POSTGRES_DB=mypostgres

